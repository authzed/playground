// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "authzed/api/v1/permission_service.proto" (package "authzed.api.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PermissionsService } from "./permission_service";
import type { ExportBulkRelationshipsResponse } from "./permission_service";
import type { ExportBulkRelationshipsRequest } from "./permission_service";
import type { ImportBulkRelationshipsResponse } from "./permission_service";
import type { ImportBulkRelationshipsRequest } from "./permission_service";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { LookupSubjectsResponse } from "./permission_service";
import type { LookupSubjectsRequest } from "./permission_service";
import type { LookupResourcesResponse } from "./permission_service";
import type { LookupResourcesRequest } from "./permission_service";
import type { ExpandPermissionTreeResponse } from "./permission_service";
import type { ExpandPermissionTreeRequest } from "./permission_service";
import type { CheckBulkPermissionsResponse } from "./permission_service";
import type { CheckBulkPermissionsRequest } from "./permission_service";
import type { CheckPermissionResponse } from "./permission_service";
import type { CheckPermissionRequest } from "./permission_service";
import type { DeleteRelationshipsResponse } from "./permission_service";
import type { DeleteRelationshipsRequest } from "./permission_service";
import type { WriteRelationshipsResponse } from "./permission_service";
import type { WriteRelationshipsRequest } from "./permission_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ReadRelationshipsResponse } from "./permission_service";
import type { ReadRelationshipsRequest } from "./permission_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * PermissionsService implements a set of RPCs that perform operations on
 * relationships and permissions.
 *
 * @generated from protobuf service authzed.api.v1.PermissionsService
 */
export interface IPermissionsServiceClient {
    /**
     * ReadRelationships reads a set of the relationships matching one or more
     * filters.
     *
     * @generated from protobuf rpc: ReadRelationships(authzed.api.v1.ReadRelationshipsRequest) returns (stream authzed.api.v1.ReadRelationshipsResponse);
     */
    readRelationships(input: ReadRelationshipsRequest, options?: RpcOptions): ServerStreamingCall<ReadRelationshipsRequest, ReadRelationshipsResponse>;
    /**
     * WriteRelationships atomically writes and/or deletes a set of specified
     * relationships. An optional set of preconditions can be provided that must
     * be satisfied for the operation to commit.
     *
     * @generated from protobuf rpc: WriteRelationships(authzed.api.v1.WriteRelationshipsRequest) returns (authzed.api.v1.WriteRelationshipsResponse);
     */
    writeRelationships(input: WriteRelationshipsRequest, options?: RpcOptions): UnaryCall<WriteRelationshipsRequest, WriteRelationshipsResponse>;
    /**
     * DeleteRelationships atomically bulk deletes all relationships matching the
     * provided filter. If no relationships match, none will be deleted and the
     * operation will succeed. An optional set of preconditions can be provided that must
     * be satisfied for the operation to commit.
     *
     * @generated from protobuf rpc: DeleteRelationships(authzed.api.v1.DeleteRelationshipsRequest) returns (authzed.api.v1.DeleteRelationshipsResponse);
     */
    deleteRelationships(input: DeleteRelationshipsRequest, options?: RpcOptions): UnaryCall<DeleteRelationshipsRequest, DeleteRelationshipsResponse>;
    /**
     * CheckPermission determines for a given resource whether a subject computes
     * to having a permission or is a direct member of a particular relation.
     *
     * @generated from protobuf rpc: CheckPermission(authzed.api.v1.CheckPermissionRequest) returns (authzed.api.v1.CheckPermissionResponse);
     */
    checkPermission(input: CheckPermissionRequest, options?: RpcOptions): UnaryCall<CheckPermissionRequest, CheckPermissionResponse>;
    /**
     * CheckBulkPermissions evaluates the given list of permission checks
     * and returns the list of results.
     *
     * @generated from protobuf rpc: CheckBulkPermissions(authzed.api.v1.CheckBulkPermissionsRequest) returns (authzed.api.v1.CheckBulkPermissionsResponse);
     */
    checkBulkPermissions(input: CheckBulkPermissionsRequest, options?: RpcOptions): UnaryCall<CheckBulkPermissionsRequest, CheckBulkPermissionsResponse>;
    /**
     * ExpandPermissionTree reveals the graph structure for a resource's
     * permission or relation. This RPC does not recurse infinitely deep and may
     * require multiple calls to fully unnest a deeply nested graph.
     *
     * @generated from protobuf rpc: ExpandPermissionTree(authzed.api.v1.ExpandPermissionTreeRequest) returns (authzed.api.v1.ExpandPermissionTreeResponse);
     */
    expandPermissionTree(input: ExpandPermissionTreeRequest, options?: RpcOptions): UnaryCall<ExpandPermissionTreeRequest, ExpandPermissionTreeResponse>;
    /**
     * LookupResources returns all the resources of a given type that a subject
     * can access whether via a computed permission or relation membership.
     *
     * @generated from protobuf rpc: LookupResources(authzed.api.v1.LookupResourcesRequest) returns (stream authzed.api.v1.LookupResourcesResponse);
     */
    lookupResources(input: LookupResourcesRequest, options?: RpcOptions): ServerStreamingCall<LookupResourcesRequest, LookupResourcesResponse>;
    /**
     * LookupSubjects returns all the subjects of a given type that
     * have access whether via a computed permission or relation membership.
     *
     * @generated from protobuf rpc: LookupSubjects(authzed.api.v1.LookupSubjectsRequest) returns (stream authzed.api.v1.LookupSubjectsResponse);
     */
    lookupSubjects(input: LookupSubjectsRequest, options?: RpcOptions): ServerStreamingCall<LookupSubjectsRequest, LookupSubjectsResponse>;
    /**
     * ImportBulkRelationships is a faster path to writing a large number of
     * relationships at once. It is both batched and streaming. For maximum
     * performance, the caller should attempt to write relationships in as close
     * to relationship sort order as possible: (resource.object_type,
     * resource.object_id, relation, subject.object.object_type,
     * subject.object.object_id, subject.optional_relation). All relationships
     * written are done so under a single transaction.
     *
     * @generated from protobuf rpc: ImportBulkRelationships(stream authzed.api.v1.ImportBulkRelationshipsRequest) returns (authzed.api.v1.ImportBulkRelationshipsResponse);
     */
    importBulkRelationships(options?: RpcOptions): ClientStreamingCall<ImportBulkRelationshipsRequest, ImportBulkRelationshipsResponse>;
    /**
     * ExportBulkRelationships is the fastest path available to exporting
     * relationships from the server. It is resumable, and will return results
     * in an order determined by the server.
     *
     * @generated from protobuf rpc: ExportBulkRelationships(authzed.api.v1.ExportBulkRelationshipsRequest) returns (stream authzed.api.v1.ExportBulkRelationshipsResponse);
     */
    exportBulkRelationships(input: ExportBulkRelationshipsRequest, options?: RpcOptions): ServerStreamingCall<ExportBulkRelationshipsRequest, ExportBulkRelationshipsResponse>;
}
/**
 * PermissionsService implements a set of RPCs that perform operations on
 * relationships and permissions.
 *
 * @generated from protobuf service authzed.api.v1.PermissionsService
 */
export class PermissionsServiceClient implements IPermissionsServiceClient, ServiceInfo {
    typeName = PermissionsService.typeName;
    methods = PermissionsService.methods;
    options = PermissionsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * ReadRelationships reads a set of the relationships matching one or more
     * filters.
     *
     * @generated from protobuf rpc: ReadRelationships(authzed.api.v1.ReadRelationshipsRequest) returns (stream authzed.api.v1.ReadRelationshipsResponse);
     */
    readRelationships(input: ReadRelationshipsRequest, options?: RpcOptions): ServerStreamingCall<ReadRelationshipsRequest, ReadRelationshipsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadRelationshipsRequest, ReadRelationshipsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * WriteRelationships atomically writes and/or deletes a set of specified
     * relationships. An optional set of preconditions can be provided that must
     * be satisfied for the operation to commit.
     *
     * @generated from protobuf rpc: WriteRelationships(authzed.api.v1.WriteRelationshipsRequest) returns (authzed.api.v1.WriteRelationshipsResponse);
     */
    writeRelationships(input: WriteRelationshipsRequest, options?: RpcOptions): UnaryCall<WriteRelationshipsRequest, WriteRelationshipsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<WriteRelationshipsRequest, WriteRelationshipsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteRelationships atomically bulk deletes all relationships matching the
     * provided filter. If no relationships match, none will be deleted and the
     * operation will succeed. An optional set of preconditions can be provided that must
     * be satisfied for the operation to commit.
     *
     * @generated from protobuf rpc: DeleteRelationships(authzed.api.v1.DeleteRelationshipsRequest) returns (authzed.api.v1.DeleteRelationshipsResponse);
     */
    deleteRelationships(input: DeleteRelationshipsRequest, options?: RpcOptions): UnaryCall<DeleteRelationshipsRequest, DeleteRelationshipsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRelationshipsRequest, DeleteRelationshipsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CheckPermission determines for a given resource whether a subject computes
     * to having a permission or is a direct member of a particular relation.
     *
     * @generated from protobuf rpc: CheckPermission(authzed.api.v1.CheckPermissionRequest) returns (authzed.api.v1.CheckPermissionResponse);
     */
    checkPermission(input: CheckPermissionRequest, options?: RpcOptions): UnaryCall<CheckPermissionRequest, CheckPermissionResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckPermissionRequest, CheckPermissionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CheckBulkPermissions evaluates the given list of permission checks
     * and returns the list of results.
     *
     * @generated from protobuf rpc: CheckBulkPermissions(authzed.api.v1.CheckBulkPermissionsRequest) returns (authzed.api.v1.CheckBulkPermissionsResponse);
     */
    checkBulkPermissions(input: CheckBulkPermissionsRequest, options?: RpcOptions): UnaryCall<CheckBulkPermissionsRequest, CheckBulkPermissionsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckBulkPermissionsRequest, CheckBulkPermissionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ExpandPermissionTree reveals the graph structure for a resource's
     * permission or relation. This RPC does not recurse infinitely deep and may
     * require multiple calls to fully unnest a deeply nested graph.
     *
     * @generated from protobuf rpc: ExpandPermissionTree(authzed.api.v1.ExpandPermissionTreeRequest) returns (authzed.api.v1.ExpandPermissionTreeResponse);
     */
    expandPermissionTree(input: ExpandPermissionTreeRequest, options?: RpcOptions): UnaryCall<ExpandPermissionTreeRequest, ExpandPermissionTreeResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExpandPermissionTreeRequest, ExpandPermissionTreeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * LookupResources returns all the resources of a given type that a subject
     * can access whether via a computed permission or relation membership.
     *
     * @generated from protobuf rpc: LookupResources(authzed.api.v1.LookupResourcesRequest) returns (stream authzed.api.v1.LookupResourcesResponse);
     */
    lookupResources(input: LookupResourcesRequest, options?: RpcOptions): ServerStreamingCall<LookupResourcesRequest, LookupResourcesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<LookupResourcesRequest, LookupResourcesResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * LookupSubjects returns all the subjects of a given type that
     * have access whether via a computed permission or relation membership.
     *
     * @generated from protobuf rpc: LookupSubjects(authzed.api.v1.LookupSubjectsRequest) returns (stream authzed.api.v1.LookupSubjectsResponse);
     */
    lookupSubjects(input: LookupSubjectsRequest, options?: RpcOptions): ServerStreamingCall<LookupSubjectsRequest, LookupSubjectsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<LookupSubjectsRequest, LookupSubjectsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * ImportBulkRelationships is a faster path to writing a large number of
     * relationships at once. It is both batched and streaming. For maximum
     * performance, the caller should attempt to write relationships in as close
     * to relationship sort order as possible: (resource.object_type,
     * resource.object_id, relation, subject.object.object_type,
     * subject.object.object_id, subject.optional_relation). All relationships
     * written are done so under a single transaction.
     *
     * @generated from protobuf rpc: ImportBulkRelationships(stream authzed.api.v1.ImportBulkRelationshipsRequest) returns (authzed.api.v1.ImportBulkRelationshipsResponse);
     */
    importBulkRelationships(options?: RpcOptions): ClientStreamingCall<ImportBulkRelationshipsRequest, ImportBulkRelationshipsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImportBulkRelationshipsRequest, ImportBulkRelationshipsResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * ExportBulkRelationships is the fastest path available to exporting
     * relationships from the server. It is resumable, and will return results
     * in an order determined by the server.
     *
     * @generated from protobuf rpc: ExportBulkRelationships(authzed.api.v1.ExportBulkRelationshipsRequest) returns (stream authzed.api.v1.ExportBulkRelationshipsResponse);
     */
    exportBulkRelationships(input: ExportBulkRelationshipsRequest, options?: RpcOptions): ServerStreamingCall<ExportBulkRelationshipsRequest, ExportBulkRelationshipsResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExportBulkRelationshipsRequest, ExportBulkRelationshipsResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
