// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "authzed/api/v1/experimental_service.proto" (package "authzed.api.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ExperimentalService } from "./experimental_service";
import type { ExperimentalUnregisterRelationshipCounterResponse } from "./experimental_service";
import type { ExperimentalUnregisterRelationshipCounterRequest } from "./experimental_service";
import type { ExperimentalCountRelationshipsResponse } from "./experimental_service";
import type { ExperimentalCountRelationshipsRequest } from "./experimental_service";
import type { ExperimentalRegisterRelationshipCounterResponse } from "./experimental_service";
import type { ExperimentalRegisterRelationshipCounterRequest } from "./experimental_service";
import type { ExperimentalDiffSchemaResponse } from "./experimental_service";
import type { ExperimentalDiffSchemaRequest } from "./experimental_service";
import type { ExperimentalDependentRelationsResponse } from "./experimental_service";
import type { ExperimentalDependentRelationsRequest } from "./experimental_service";
import type { ExperimentalComputablePermissionsResponse } from "./experimental_service";
import type { ExperimentalComputablePermissionsRequest } from "./experimental_service";
import type { ExperimentalReflectSchemaResponse } from "./experimental_service";
import type { ExperimentalReflectSchemaRequest } from "./experimental_service";
import type { BulkCheckPermissionResponse } from "./experimental_service";
import type { BulkCheckPermissionRequest } from "./experimental_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { BulkExportRelationshipsResponse } from "./experimental_service";
import type { BulkExportRelationshipsRequest } from "./experimental_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { BulkImportRelationshipsResponse } from "./experimental_service";
import type { BulkImportRelationshipsRequest } from "./experimental_service";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * ExperimentalService exposes a number of APIs that are currently being
 * prototyped and tested for future inclusion in the stable API.
 *
 * @generated from protobuf service authzed.api.v1.ExperimentalService
 */
export interface IExperimentalServiceClient {
    /**
     * BulkImportRelationships is a faster path to writing a large number of
     * relationships at once. It is both batched and streaming. For maximum
     * performance, the caller should attempt to write relationships in as close
     * to relationship sort order as possible: (resource.object_type,
     * resource.object_id, relation, subject.object.object_type,
     * subject.object.object_id, subject.optional_relation)
     *
     * EXPERIMENTAL
     * https://github.com/authzed/spicedb/issues/1303
     *
     * @generated from protobuf rpc: BulkImportRelationships(stream authzed.api.v1.BulkImportRelationshipsRequest) returns (authzed.api.v1.BulkImportRelationshipsResponse);
     */
    bulkImportRelationships(options?: RpcOptions): ClientStreamingCall<BulkImportRelationshipsRequest, BulkImportRelationshipsResponse>;
    /**
     * BulkExportRelationships is the fastest path available to exporting
     * relationships from the server. It is resumable, and will return results
     * in an order determined by the server.
     *
     * @generated from protobuf rpc: BulkExportRelationships(authzed.api.v1.BulkExportRelationshipsRequest) returns (stream authzed.api.v1.BulkExportRelationshipsResponse);
     */
    bulkExportRelationships(input: BulkExportRelationshipsRequest, options?: RpcOptions): ServerStreamingCall<BulkExportRelationshipsRequest, BulkExportRelationshipsResponse>;
    /**
     * NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
     * API will be removed from experimental in a future release.
     *
     * @deprecated
     * @generated from protobuf rpc: BulkCheckPermission(authzed.api.v1.BulkCheckPermissionRequest) returns (authzed.api.v1.BulkCheckPermissionResponse);
     */
    bulkCheckPermission(input: BulkCheckPermissionRequest, options?: RpcOptions): UnaryCall<BulkCheckPermissionRequest, BulkCheckPermissionResponse>;
    /**
     * EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
     * SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
     *
     * @generated from protobuf rpc: ExperimentalReflectSchema(authzed.api.v1.ExperimentalReflectSchemaRequest) returns (authzed.api.v1.ExperimentalReflectSchemaResponse);
     */
    experimentalReflectSchema(input: ExperimentalReflectSchemaRequest, options?: RpcOptions): UnaryCall<ExperimentalReflectSchemaRequest, ExperimentalReflectSchemaResponse>;
    /**
     * EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
     * permissions that compute based off a relation. For example, if a schema has a relation
     * `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
     * computable permissions for the relation `viewer` will include `view`.
     *
     * @generated from protobuf rpc: ExperimentalComputablePermissions(authzed.api.v1.ExperimentalComputablePermissionsRequest) returns (authzed.api.v1.ExperimentalComputablePermissionsResponse);
     */
    experimentalComputablePermissions(input: ExperimentalComputablePermissionsRequest, options?: RpcOptions): UnaryCall<ExperimentalComputablePermissionsRequest, ExperimentalComputablePermissionsResponse>;
    /**
     * EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
     * relations and permissions that used to compute a permission, recursively. It is the
     * inverse of the ComputablePermissions API.
     *
     * @generated from protobuf rpc: ExperimentalDependentRelations(authzed.api.v1.ExperimentalDependentRelationsRequest) returns (authzed.api.v1.ExperimentalDependentRelationsResponse);
     */
    experimentalDependentRelations(input: ExperimentalDependentRelationsRequest, options?: RpcOptions): UnaryCall<ExperimentalDependentRelationsRequest, ExperimentalDependentRelationsResponse>;
    /**
     * EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
     * specified schema and the schema stored in SpiceDB. This is useful for clients that need to
     * introspect the schema of a SpiceDB instance.
     *
     * @generated from protobuf rpc: ExperimentalDiffSchema(authzed.api.v1.ExperimentalDiffSchemaRequest) returns (authzed.api.v1.ExperimentalDiffSchemaResponse);
     */
    experimentalDiffSchema(input: ExperimentalDiffSchemaRequest, options?: RpcOptions): UnaryCall<ExperimentalDiffSchemaRequest, ExperimentalDiffSchemaResponse>;
    /**
     * EXPERIMENTAL: RegisterRelationshipCounter registers a new filter for counting relationships. A filter must be registered before
     * a count can be requested.
     *
     * @generated from protobuf rpc: ExperimentalRegisterRelationshipCounter(authzed.api.v1.ExperimentalRegisterRelationshipCounterRequest) returns (authzed.api.v1.ExperimentalRegisterRelationshipCounterResponse);
     */
    experimentalRegisterRelationshipCounter(input: ExperimentalRegisterRelationshipCounterRequest, options?: RpcOptions): UnaryCall<ExperimentalRegisterRelationshipCounterRequest, ExperimentalRegisterRelationshipCounterResponse>;
    /**
     * EXPERIMENTAL: CountRelationships returns the count of relationships for *pre-registered* filter.
     *
     * @generated from protobuf rpc: ExperimentalCountRelationships(authzed.api.v1.ExperimentalCountRelationshipsRequest) returns (authzed.api.v1.ExperimentalCountRelationshipsResponse);
     */
    experimentalCountRelationships(input: ExperimentalCountRelationshipsRequest, options?: RpcOptions): UnaryCall<ExperimentalCountRelationshipsRequest, ExperimentalCountRelationshipsResponse>;
    /**
     * EXPERIMENTAL: UnregisterRelationshipCounter unregisters an existing filter for counting relationships.
     *
     * @generated from protobuf rpc: ExperimentalUnregisterRelationshipCounter(authzed.api.v1.ExperimentalUnregisterRelationshipCounterRequest) returns (authzed.api.v1.ExperimentalUnregisterRelationshipCounterResponse);
     */
    experimentalUnregisterRelationshipCounter(input: ExperimentalUnregisterRelationshipCounterRequest, options?: RpcOptions): UnaryCall<ExperimentalUnregisterRelationshipCounterRequest, ExperimentalUnregisterRelationshipCounterResponse>;
}
/**
 * ExperimentalService exposes a number of APIs that are currently being
 * prototyped and tested for future inclusion in the stable API.
 *
 * @generated from protobuf service authzed.api.v1.ExperimentalService
 */
export class ExperimentalServiceClient implements IExperimentalServiceClient, ServiceInfo {
    typeName = ExperimentalService.typeName;
    methods = ExperimentalService.methods;
    options = ExperimentalService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * BulkImportRelationships is a faster path to writing a large number of
     * relationships at once. It is both batched and streaming. For maximum
     * performance, the caller should attempt to write relationships in as close
     * to relationship sort order as possible: (resource.object_type,
     * resource.object_id, relation, subject.object.object_type,
     * subject.object.object_id, subject.optional_relation)
     *
     * EXPERIMENTAL
     * https://github.com/authzed/spicedb/issues/1303
     *
     * @generated from protobuf rpc: BulkImportRelationships(stream authzed.api.v1.BulkImportRelationshipsRequest) returns (authzed.api.v1.BulkImportRelationshipsResponse);
     */
    bulkImportRelationships(options?: RpcOptions): ClientStreamingCall<BulkImportRelationshipsRequest, BulkImportRelationshipsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<BulkImportRelationshipsRequest, BulkImportRelationshipsResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * BulkExportRelationships is the fastest path available to exporting
     * relationships from the server. It is resumable, and will return results
     * in an order determined by the server.
     *
     * @generated from protobuf rpc: BulkExportRelationships(authzed.api.v1.BulkExportRelationshipsRequest) returns (stream authzed.api.v1.BulkExportRelationshipsResponse);
     */
    bulkExportRelationships(input: BulkExportRelationshipsRequest, options?: RpcOptions): ServerStreamingCall<BulkExportRelationshipsRequest, BulkExportRelationshipsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BulkExportRelationshipsRequest, BulkExportRelationshipsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
     * API will be removed from experimental in a future release.
     *
     * @deprecated
     * @generated from protobuf rpc: BulkCheckPermission(authzed.api.v1.BulkCheckPermissionRequest) returns (authzed.api.v1.BulkCheckPermissionResponse);
     */
    bulkCheckPermission(input: BulkCheckPermissionRequest, options?: RpcOptions): UnaryCall<BulkCheckPermissionRequest, BulkCheckPermissionResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<BulkCheckPermissionRequest, BulkCheckPermissionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
     * SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
     *
     * @generated from protobuf rpc: ExperimentalReflectSchema(authzed.api.v1.ExperimentalReflectSchemaRequest) returns (authzed.api.v1.ExperimentalReflectSchemaResponse);
     */
    experimentalReflectSchema(input: ExperimentalReflectSchemaRequest, options?: RpcOptions): UnaryCall<ExperimentalReflectSchemaRequest, ExperimentalReflectSchemaResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalReflectSchemaRequest, ExperimentalReflectSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
     * permissions that compute based off a relation. For example, if a schema has a relation
     * `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
     * computable permissions for the relation `viewer` will include `view`.
     *
     * @generated from protobuf rpc: ExperimentalComputablePermissions(authzed.api.v1.ExperimentalComputablePermissionsRequest) returns (authzed.api.v1.ExperimentalComputablePermissionsResponse);
     */
    experimentalComputablePermissions(input: ExperimentalComputablePermissionsRequest, options?: RpcOptions): UnaryCall<ExperimentalComputablePermissionsRequest, ExperimentalComputablePermissionsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalComputablePermissionsRequest, ExperimentalComputablePermissionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
     * relations and permissions that used to compute a permission, recursively. It is the
     * inverse of the ComputablePermissions API.
     *
     * @generated from protobuf rpc: ExperimentalDependentRelations(authzed.api.v1.ExperimentalDependentRelationsRequest) returns (authzed.api.v1.ExperimentalDependentRelationsResponse);
     */
    experimentalDependentRelations(input: ExperimentalDependentRelationsRequest, options?: RpcOptions): UnaryCall<ExperimentalDependentRelationsRequest, ExperimentalDependentRelationsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalDependentRelationsRequest, ExperimentalDependentRelationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
     * specified schema and the schema stored in SpiceDB. This is useful for clients that need to
     * introspect the schema of a SpiceDB instance.
     *
     * @generated from protobuf rpc: ExperimentalDiffSchema(authzed.api.v1.ExperimentalDiffSchemaRequest) returns (authzed.api.v1.ExperimentalDiffSchemaResponse);
     */
    experimentalDiffSchema(input: ExperimentalDiffSchemaRequest, options?: RpcOptions): UnaryCall<ExperimentalDiffSchemaRequest, ExperimentalDiffSchemaResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalDiffSchemaRequest, ExperimentalDiffSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: RegisterRelationshipCounter registers a new filter for counting relationships. A filter must be registered before
     * a count can be requested.
     *
     * @generated from protobuf rpc: ExperimentalRegisterRelationshipCounter(authzed.api.v1.ExperimentalRegisterRelationshipCounterRequest) returns (authzed.api.v1.ExperimentalRegisterRelationshipCounterResponse);
     */
    experimentalRegisterRelationshipCounter(input: ExperimentalRegisterRelationshipCounterRequest, options?: RpcOptions): UnaryCall<ExperimentalRegisterRelationshipCounterRequest, ExperimentalRegisterRelationshipCounterResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalRegisterRelationshipCounterRequest, ExperimentalRegisterRelationshipCounterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: CountRelationships returns the count of relationships for *pre-registered* filter.
     *
     * @generated from protobuf rpc: ExperimentalCountRelationships(authzed.api.v1.ExperimentalCountRelationshipsRequest) returns (authzed.api.v1.ExperimentalCountRelationshipsResponse);
     */
    experimentalCountRelationships(input: ExperimentalCountRelationshipsRequest, options?: RpcOptions): UnaryCall<ExperimentalCountRelationshipsRequest, ExperimentalCountRelationshipsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalCountRelationshipsRequest, ExperimentalCountRelationshipsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EXPERIMENTAL: UnregisterRelationshipCounter unregisters an existing filter for counting relationships.
     *
     * @generated from protobuf rpc: ExperimentalUnregisterRelationshipCounter(authzed.api.v1.ExperimentalUnregisterRelationshipCounterRequest) returns (authzed.api.v1.ExperimentalUnregisterRelationshipCounterResponse);
     */
    experimentalUnregisterRelationshipCounter(input: ExperimentalUnregisterRelationshipCounterRequest, options?: RpcOptions): UnaryCall<ExperimentalUnregisterRelationshipCounterRequest, ExperimentalUnregisterRelationshipCounterResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExperimentalUnregisterRelationshipCounterRequest, ExperimentalUnregisterRelationshipCounterResponse>("unary", this._transport, method, opt, input);
    }
}
