// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "authzed/api/v1alpha1/watchresources_service.proto" (package "authzed.api.v1alpha1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WatchResourcesService } from "./watchresources_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { WatchResourcesResponse } from "./watchresources_service";
import type { WatchResourcesRequest } from "./watchresources_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * WatchResourcesService is used to receive a stream of updates for resources of a
 * specific (resource type, permission, subject) combination.
 *
 * @generated from protobuf service authzed.api.v1alpha1.WatchResourcesService
 */
export interface IWatchResourcesServiceClient {
    /**
     * WatchResources initiates a watch for permission changes for the provided
     * (resource type, permission, subject) pair.
     *
     * @generated from protobuf rpc: WatchResources(authzed.api.v1alpha1.WatchResourcesRequest) returns (stream authzed.api.v1alpha1.WatchResourcesResponse);
     */
    watchResources(input: WatchResourcesRequest, options?: RpcOptions): ServerStreamingCall<WatchResourcesRequest, WatchResourcesResponse>;
}
/**
 * WatchResourcesService is used to receive a stream of updates for resources of a
 * specific (resource type, permission, subject) combination.
 *
 * @generated from protobuf service authzed.api.v1alpha1.WatchResourcesService
 */
export class WatchResourcesServiceClient implements IWatchResourcesServiceClient, ServiceInfo {
    typeName = WatchResourcesService.typeName;
    methods = WatchResourcesService.methods;
    options = WatchResourcesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * WatchResources initiates a watch for permission changes for the provided
     * (resource type, permission, subject) pair.
     *
     * @generated from protobuf rpc: WatchResources(authzed.api.v1alpha1.WatchResourcesRequest) returns (stream authzed.api.v1alpha1.WatchResourcesResponse);
     */
    watchResources(input: WatchResourcesRequest, options?: RpcOptions): ServerStreamingCall<WatchResourcesRequest, WatchResourcesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<WatchResourcesRequest, WatchResourcesResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
