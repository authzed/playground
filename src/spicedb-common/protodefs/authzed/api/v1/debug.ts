// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies,optimize_code_size
// @generated from protobuf file "authzed/api/v1/debug.proto" (package "authzed.api.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { PartialCaveatInfo } from "./core";
import { Struct } from "../../../google/protobuf/struct";
import { SubjectReference } from "./core";
import { ObjectReference } from "./core";
/**
 * DebugInformation defines debug information returned by an API call in a footer when
 * requested with a specific debugging header.
 *
 * The specific debug information returned will depend on the type of the API call made.
 *
 * See the github.com/authzed/authzed-go project for the specific header and footer names.
 *
 * @generated from protobuf message authzed.api.v1.DebugInformation
 */
export interface DebugInformation {
    /**
     * check holds debug information about a check request.
     *
     * @generated from protobuf field: authzed.api.v1.CheckDebugTrace check = 1;
     */
    check?: CheckDebugTrace;
    /**
     * schema_used holds the schema used for the request.
     *
     * @generated from protobuf field: string schema_used = 2;
     */
    schemaUsed: string;
}
/**
 * CheckDebugTrace is a recursive trace of the requests made for resolving a CheckPermission
 * API call.
 *
 * @generated from protobuf message authzed.api.v1.CheckDebugTrace
 */
export interface CheckDebugTrace {
    /**
     * resource holds the resource on which the Check was performed.
     *
     * @generated from protobuf field: authzed.api.v1.ObjectReference resource = 1;
     */
    resource?: ObjectReference;
    /**
     * permission holds the name of the permission or relation on which the Check was performed.
     *
     * @generated from protobuf field: string permission = 2;
     */
    permission: string;
    /**
     * permission_type holds information indicating whether it was a permission or relation.
     *
     * @generated from protobuf field: authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;
     */
    permissionType: CheckDebugTrace_PermissionType;
    /**
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     *
     * @generated from protobuf field: authzed.api.v1.SubjectReference subject = 4;
     */
    subject?: SubjectReference;
    /**
     * result holds the result of the Check call.
     *
     * @generated from protobuf field: authzed.api.v1.CheckDebugTrace.Permissionship result = 5;
     */
    result: CheckDebugTrace_Permissionship;
    /**
     * caveat_evaluation_info holds information about the caveat evaluated for this step of the trace.
     *
     * @generated from protobuf field: authzed.api.v1.CaveatEvalInfo caveat_evaluation_info = 8;
     */
    caveatEvaluationInfo?: CaveatEvalInfo;
    /**
     * @generated from protobuf oneof: resolution
     */
    resolution: {
        oneofKind: "wasCachedResult";
        /**
         * was_cached_result, if true, indicates that the result was found in the cache and returned directly.
         *
         * @generated from protobuf field: bool was_cached_result = 6;
         */
        wasCachedResult: boolean;
    } | {
        oneofKind: "subProblems";
        /**
         * sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
         * and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
         *
         * @generated from protobuf field: authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7;
         */
        subProblems: CheckDebugTrace_SubProblems;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message authzed.api.v1.CheckDebugTrace.SubProblems
 */
export interface CheckDebugTrace_SubProblems {
    /**
     * @generated from protobuf field: repeated authzed.api.v1.CheckDebugTrace traces = 1;
     */
    traces: CheckDebugTrace[];
}
/**
 * @generated from protobuf enum authzed.api.v1.CheckDebugTrace.PermissionType
 */
export enum CheckDebugTrace_PermissionType {
    /**
     * @generated from protobuf enum value: PERMISSION_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: PERMISSION_TYPE_RELATION = 1;
     */
    RELATION = 1,
    /**
     * @generated from protobuf enum value: PERMISSION_TYPE_PERMISSION = 2;
     */
    PERMISSION = 2
}
/**
 * @generated from protobuf enum authzed.api.v1.CheckDebugTrace.Permissionship
 */
export enum CheckDebugTrace_Permissionship {
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_NO_PERMISSION = 1;
     */
    NO_PERMISSION = 1,
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_HAS_PERMISSION = 2;
     */
    HAS_PERMISSION = 2,
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_CONDITIONAL_PERMISSION = 3;
     */
    CONDITIONAL_PERMISSION = 3
}
/**
 * CaveatEvalInfo holds information about a caveat expression that was evaluated.
 *
 * @generated from protobuf message authzed.api.v1.CaveatEvalInfo
 */
export interface CaveatEvalInfo {
    /**
     * expression is the expression that was evaluated.
     *
     * @generated from protobuf field: string expression = 1;
     */
    expression: string;
    /**
     * result is the result of the evaluation.
     *
     * @generated from protobuf field: authzed.api.v1.CaveatEvalInfo.Result result = 2;
     */
    result: CaveatEvalInfo_Result;
    /**
     * context consists of any named values that were used for evaluating the caveat expression.
     *
     * @generated from protobuf field: google.protobuf.Struct context = 3;
     */
    context?: Struct;
    /**
     * partial_caveat_info holds information of a partially-evaluated caveated response, if applicable.
     *
     * @generated from protobuf field: authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4;
     */
    partialCaveatInfo?: PartialCaveatInfo;
    /**
     * caveat_name is the name of the caveat that was executed, if applicable.
     *
     * @generated from protobuf field: string caveat_name = 5;
     */
    caveatName: string;
}
/**
 * @generated from protobuf enum authzed.api.v1.CaveatEvalInfo.Result
 */
export enum CaveatEvalInfo_Result {
    /**
     * @generated from protobuf enum value: RESULT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RESULT_UNEVALUATED = 1;
     */
    UNEVALUATED = 1,
    /**
     * @generated from protobuf enum value: RESULT_FALSE = 2;
     */
    FALSE = 2,
    /**
     * @generated from protobuf enum value: RESULT_TRUE = 3;
     */
    TRUE = 3,
    /**
     * @generated from protobuf enum value: RESULT_MISSING_SOME_CONTEXT = 4;
     */
    MISSING_SOME_CONTEXT = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class DebugInformation$Type extends MessageType<DebugInformation> {
    constructor() {
        super("authzed.api.v1.DebugInformation", [
            { no: 1, name: "check", kind: "message", T: () => CheckDebugTrace },
            { no: 2, name: "schema_used", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.DebugInformation
 */
export const DebugInformation = new DebugInformation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckDebugTrace$Type extends MessageType<CheckDebugTrace> {
    constructor() {
        super("authzed.api.v1.CheckDebugTrace", [
            { no: 1, name: "resource", kind: "message", T: () => ObjectReference, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "permission", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "permission_type", kind: "enum", T: () => ["authzed.api.v1.CheckDebugTrace.PermissionType", CheckDebugTrace_PermissionType, "PERMISSION_TYPE_"], options: { "validate.rules": { enum: { definedOnly: true, notIn: [0] } } } },
            { no: 4, name: "subject", kind: "message", T: () => SubjectReference, options: { "validate.rules": { message: { required: true } } } },
            { no: 5, name: "result", kind: "enum", T: () => ["authzed.api.v1.CheckDebugTrace.Permissionship", CheckDebugTrace_Permissionship, "PERMISSIONSHIP_"], options: { "validate.rules": { enum: { definedOnly: true, notIn: [0] } } } },
            { no: 8, name: "caveat_evaluation_info", kind: "message", T: () => CaveatEvalInfo },
            { no: 6, name: "was_cached_result", kind: "scalar", oneof: "resolution", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "sub_problems", kind: "message", oneof: "resolution", T: () => CheckDebugTrace_SubProblems }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.CheckDebugTrace
 */
export const CheckDebugTrace = new CheckDebugTrace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckDebugTrace_SubProblems$Type extends MessageType<CheckDebugTrace_SubProblems> {
    constructor() {
        super("authzed.api.v1.CheckDebugTrace.SubProblems", [
            { no: 1, name: "traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CheckDebugTrace }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.CheckDebugTrace.SubProblems
 */
export const CheckDebugTrace_SubProblems = new CheckDebugTrace_SubProblems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CaveatEvalInfo$Type extends MessageType<CaveatEvalInfo> {
    constructor() {
        super("authzed.api.v1.CaveatEvalInfo", [
            { no: 1, name: "expression", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "result", kind: "enum", T: () => ["authzed.api.v1.CaveatEvalInfo.Result", CaveatEvalInfo_Result, "RESULT_"] },
            { no: 3, name: "context", kind: "message", T: () => Struct },
            { no: 4, name: "partial_caveat_info", kind: "message", T: () => PartialCaveatInfo },
            { no: 5, name: "caveat_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.CaveatEvalInfo
 */
export const CaveatEvalInfo = new CaveatEvalInfo$Type();
