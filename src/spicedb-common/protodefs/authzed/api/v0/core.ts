// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies,optimize_code_size
// @generated from protobuf file "authzed/api/v0/core.proto" (package "authzed.api.v0", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message authzed.api.v0.RelationTuple
 */
export interface RelationTuple {
    /**
     * Each tupleset specifies keys of a set of relation tuples. The set can
     * include a single tuple key, or all tuples with a given object ID or
     * userset in a namespace, optionally constrained by a relation name.
     *
     * examples:
     * doc:readme#viewer@group:eng#member (fully specified)
     * doc:*#*#group:eng#member (all tuples that this userset relates to)
     * doc:12345#*#* (all tuples with a direct relationship to a document)
     * doc:12345#writer#* (all tuples with direct write relationship with the
     * document) doc:#writer#group:eng#member (all tuples that eng group has write
     * relationship)
     *
     * @generated from protobuf field: authzed.api.v0.ObjectAndRelation object_and_relation = 1;
     */
    objectAndRelation?: ObjectAndRelation;
    /**
     * @generated from protobuf field: authzed.api.v0.User user = 2;
     */
    user?: User;
}
/**
 * @generated from protobuf message authzed.api.v0.ObjectAndRelation
 */
export interface ObjectAndRelation {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: string object_id = 2;
     */
    objectId: string;
    /**
     * @generated from protobuf field: string relation = 3;
     */
    relation: string;
}
/**
 * @generated from protobuf message authzed.api.v0.RelationReference
 */
export interface RelationReference {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: string relation = 3;
     */
    relation: string;
}
/**
 * @generated from protobuf message authzed.api.v0.User
 */
export interface User {
    /**
     * @generated from protobuf oneof: user_oneof
     */
    userOneof: {
        oneofKind: "userset";
        /**
         * @generated from protobuf field: authzed.api.v0.ObjectAndRelation userset = 2;
         */
        userset: ObjectAndRelation;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class RelationTuple$Type extends MessageType<RelationTuple> {
    constructor() {
        super("authzed.api.v0.RelationTuple", [
            { no: 1, name: "object_and_relation", kind: "message", T: () => ObjectAndRelation, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "user", kind: "message", T: () => User, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.RelationTuple
 */
export const RelationTuple = new RelationTuple$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectAndRelation$Type extends MessageType<ObjectAndRelation> {
    constructor() {
        super("authzed.api.v0.ObjectAndRelation", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$" } } } },
            { no: 2, name: "object_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "128", pattern: "^(([a-zA-Z0-9_][a-zA-Z0-9/_|-]{0,127})|\\*)$" } } } },
            { no: 3, name: "relation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^(\\.\\.\\.|[a-z][a-z0-9_]{1,62}[a-z0-9])$" } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ObjectAndRelation
 */
export const ObjectAndRelation = new ObjectAndRelation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelationReference$Type extends MessageType<RelationReference> {
    constructor() {
        super("authzed.api.v0.RelationReference", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$" } } } },
            { no: 3, name: "relation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^(\\.\\.\\.|[a-z][a-z0-9_]{1,62}[a-z0-9])$" } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.RelationReference
 */
export const RelationReference = new RelationReference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("authzed.api.v0.User", [
            { no: 2, name: "userset", kind: "message", oneof: "userOneof", T: () => ObjectAndRelation, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.User
 */
export const User = new User$Type();
