// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "authzed/api/v0/developer.proto" (package "authzed.api.v0", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RelationTuple } from "./core";
/**
 * @generated from protobuf message authzed.api.v0.FormatSchemaRequest
 */
export interface FormatSchemaRequest {
    /**
     * @generated from protobuf field: string schema = 1;
     */
    schema: string;
}
/**
 * @generated from protobuf message authzed.api.v0.FormatSchemaResponse
 */
export interface FormatSchemaResponse {
    /**
     * @generated from protobuf field: authzed.api.v0.DeveloperError error = 1;
     */
    error?: DeveloperError;
    /**
     * @generated from protobuf field: string formatted_schema = 2;
     */
    formattedSchema: string;
}
/**
 * @generated from protobuf message authzed.api.v0.UpgradeSchemaRequest
 */
export interface UpgradeSchemaRequest {
    /**
     * @generated from protobuf field: repeated string namespace_configs = 1;
     */
    namespaceConfigs: string[];
}
/**
 * @generated from protobuf message authzed.api.v0.UpgradeSchemaResponse
 */
export interface UpgradeSchemaResponse {
    /**
     * @generated from protobuf field: authzed.api.v0.DeveloperError error = 1;
     */
    error?: DeveloperError;
    /**
     * @generated from protobuf field: string upgraded_schema = 2;
     */
    upgradedSchema: string;
}
/**
 * @generated from protobuf message authzed.api.v0.ShareRequest
 */
export interface ShareRequest {
    /**
     * @generated from protobuf field: string schema = 1;
     */
    schema: string;
    /**
     * @generated from protobuf field: string relationships_yaml = 2;
     */
    relationshipsYaml: string;
    /**
     * @generated from protobuf field: string validation_yaml = 3;
     */
    validationYaml: string;
    /**
     * @generated from protobuf field: string assertions_yaml = 4;
     */
    assertionsYaml: string;
}
/**
 * @generated from protobuf message authzed.api.v0.ShareResponse
 */
export interface ShareResponse {
    /**
     * @generated from protobuf field: string share_reference = 1;
     */
    shareReference: string;
}
/**
 * @generated from protobuf message authzed.api.v0.LookupShareRequest
 */
export interface LookupShareRequest {
    /**
     * @generated from protobuf field: string share_reference = 1;
     */
    shareReference: string;
}
/**
 * @generated from protobuf message authzed.api.v0.LookupShareResponse
 */
export interface LookupShareResponse {
    /**
     * @generated from protobuf field: authzed.api.v0.LookupShareResponse.LookupStatus status = 1;
     */
    status: LookupShareResponse_LookupStatus;
    /**
     * @generated from protobuf field: string schema = 2;
     */
    schema: string;
    /**
     * @generated from protobuf field: string relationships_yaml = 3;
     */
    relationshipsYaml: string;
    /**
     * @generated from protobuf field: string validation_yaml = 4;
     */
    validationYaml: string;
    /**
     * @generated from protobuf field: string assertions_yaml = 5;
     */
    assertionsYaml: string;
}
/**
 * @generated from protobuf enum authzed.api.v0.LookupShareResponse.LookupStatus
 */
export enum LookupShareResponse_LookupStatus {
    /**
     * @generated from protobuf enum value: UNKNOWN_REFERENCE = 0;
     */
    UNKNOWN_REFERENCE = 0,
    /**
     * @generated from protobuf enum value: FAILED_TO_LOOKUP = 1;
     */
    FAILED_TO_LOOKUP = 1,
    /**
     * @generated from protobuf enum value: VALID_REFERENCE = 2;
     */
    VALID_REFERENCE = 2,
    /**
     * @generated from protobuf enum value: UPGRADED_REFERENCE = 3;
     */
    UPGRADED_REFERENCE = 3
}
/**
 * @generated from protobuf message authzed.api.v0.RequestContext
 */
export interface RequestContext {
    /**
     * @generated from protobuf field: string schema = 1;
     */
    schema: string;
    /**
     * @generated from protobuf field: repeated authzed.api.v0.RelationTuple relationships = 2;
     */
    relationships: RelationTuple[];
}
/**
 * @generated from protobuf message authzed.api.v0.EditCheckRequest
 */
export interface EditCheckRequest {
    /**
     * @generated from protobuf field: authzed.api.v0.RequestContext context = 1;
     */
    context?: RequestContext;
    /**
     * @generated from protobuf field: repeated authzed.api.v0.RelationTuple check_relationships = 2;
     */
    checkRelationships: RelationTuple[];
}
/**
 * @generated from protobuf message authzed.api.v0.EditCheckResult
 */
export interface EditCheckResult {
    /**
     * @generated from protobuf field: authzed.api.v0.RelationTuple relationship = 1;
     */
    relationship?: RelationTuple;
    /**
     * @generated from protobuf field: bool is_member = 2;
     */
    isMember: boolean;
    /**
     * @generated from protobuf field: authzed.api.v0.DeveloperError error = 3;
     */
    error?: DeveloperError;
}
/**
 * @generated from protobuf message authzed.api.v0.EditCheckResponse
 */
export interface EditCheckResponse {
    /**
     * @generated from protobuf field: repeated authzed.api.v0.DeveloperError request_errors = 1;
     */
    requestErrors: DeveloperError[];
    /**
     * @generated from protobuf field: repeated authzed.api.v0.EditCheckResult check_results = 2;
     */
    checkResults: EditCheckResult[];
}
/**
 * @generated from protobuf message authzed.api.v0.ValidateRequest
 */
export interface ValidateRequest {
    /**
     * @generated from protobuf field: authzed.api.v0.RequestContext context = 1;
     */
    context?: RequestContext;
    /**
     * @generated from protobuf field: string validation_yaml = 3;
     */
    validationYaml: string;
    /**
     * @generated from protobuf field: bool update_validation_yaml = 4;
     */
    updateValidationYaml: boolean;
    /**
     * @generated from protobuf field: string assertions_yaml = 5;
     */
    assertionsYaml: string;
}
/**
 * @generated from protobuf message authzed.api.v0.ValidateResponse
 */
export interface ValidateResponse {
    /**
     * @generated from protobuf field: repeated authzed.api.v0.DeveloperError request_errors = 1;
     */
    requestErrors: DeveloperError[];
    /**
     * @generated from protobuf field: repeated authzed.api.v0.DeveloperError validation_errors = 2;
     */
    validationErrors: DeveloperError[];
    /**
     * @generated from protobuf field: string updated_validation_yaml = 3;
     */
    updatedValidationYaml: string;
}
/**
 * @generated from protobuf message authzed.api.v0.DeveloperError
 */
export interface DeveloperError {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: uint32 line = 2;
     */
    line: number;
    /**
     * @generated from protobuf field: uint32 column = 3;
     */
    column: number;
    /**
     * @generated from protobuf field: authzed.api.v0.DeveloperError.Source source = 4;
     */
    source: DeveloperError_Source;
    /**
     * @generated from protobuf field: authzed.api.v0.DeveloperError.ErrorKind kind = 5;
     */
    kind: DeveloperError_ErrorKind;
    /**
     * @generated from protobuf field: repeated string path = 6;
     */
    path: string[];
    /**
     * context holds the context for the error. For schema issues, this will be the
     * name of the object type. For relationship issues, the full relationship string.
     *
     * @generated from protobuf field: string context = 7;
     */
    context: string;
}
/**
 * @generated from protobuf enum authzed.api.v0.DeveloperError.Source
 */
export enum DeveloperError_Source {
    /**
     * @generated from protobuf enum value: UNKNOWN_SOURCE = 0;
     */
    UNKNOWN_SOURCE = 0,
    /**
     * @generated from protobuf enum value: SCHEMA = 1;
     */
    SCHEMA = 1,
    /**
     * @generated from protobuf enum value: RELATIONSHIP = 2;
     */
    RELATIONSHIP = 2,
    /**
     * @generated from protobuf enum value: VALIDATION_YAML = 3;
     */
    VALIDATION_YAML = 3,
    /**
     * @generated from protobuf enum value: CHECK_WATCH = 4;
     */
    CHECK_WATCH = 4,
    /**
     * @generated from protobuf enum value: ASSERTION = 5;
     */
    ASSERTION = 5
}
/**
 * @generated from protobuf enum authzed.api.v0.DeveloperError.ErrorKind
 */
export enum DeveloperError_ErrorKind {
    /**
     * @generated from protobuf enum value: UNKNOWN_KIND = 0;
     */
    UNKNOWN_KIND = 0,
    /**
     * @generated from protobuf enum value: PARSE_ERROR = 1;
     */
    PARSE_ERROR = 1,
    /**
     * @generated from protobuf enum value: SCHEMA_ISSUE = 2;
     */
    SCHEMA_ISSUE = 2,
    /**
     * @generated from protobuf enum value: DUPLICATE_RELATIONSHIP = 3;
     */
    DUPLICATE_RELATIONSHIP = 3,
    /**
     * @generated from protobuf enum value: MISSING_EXPECTED_RELATIONSHIP = 4;
     */
    MISSING_EXPECTED_RELATIONSHIP = 4,
    /**
     * @generated from protobuf enum value: EXTRA_RELATIONSHIP_FOUND = 5;
     */
    EXTRA_RELATIONSHIP_FOUND = 5,
    /**
     * @generated from protobuf enum value: UNKNOWN_OBJECT_TYPE = 6;
     */
    UNKNOWN_OBJECT_TYPE = 6,
    /**
     * @generated from protobuf enum value: UNKNOWN_RELATION = 7;
     */
    UNKNOWN_RELATION = 7,
    /**
     * @generated from protobuf enum value: MAXIMUM_RECURSION = 8;
     */
    MAXIMUM_RECURSION = 8,
    /**
     * @generated from protobuf enum value: ASSERTION_FAILED = 9;
     */
    ASSERTION_FAILED = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class FormatSchemaRequest$Type extends MessageType<FormatSchemaRequest> {
    constructor() {
        super("authzed.api.v0.FormatSchemaRequest", [
            { no: 1, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FormatSchemaRequest>): FormatSchemaRequest {
        const message = { schema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FormatSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FormatSchemaRequest): FormatSchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema */ 1:
                    message.schema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FormatSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema = 1; */
        if (message.schema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.FormatSchemaRequest
 */
export const FormatSchemaRequest = new FormatSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FormatSchemaResponse$Type extends MessageType<FormatSchemaResponse> {
    constructor() {
        super("authzed.api.v0.FormatSchemaResponse", [
            { no: 1, name: "error", kind: "message", T: () => DeveloperError },
            { no: 2, name: "formatted_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FormatSchemaResponse>): FormatSchemaResponse {
        const message = { formattedSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FormatSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FormatSchemaResponse): FormatSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.DeveloperError error */ 1:
                    message.error = DeveloperError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* string formatted_schema */ 2:
                    message.formattedSchema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FormatSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.DeveloperError error = 1; */
        if (message.error)
            DeveloperError.internalBinaryWrite(message.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string formatted_schema = 2; */
        if (message.formattedSchema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.formattedSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.FormatSchemaResponse
 */
export const FormatSchemaResponse = new FormatSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeSchemaRequest$Type extends MessageType<UpgradeSchemaRequest> {
    constructor() {
        super("authzed.api.v0.UpgradeSchemaRequest", [
            { no: 1, name: "namespace_configs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpgradeSchemaRequest>): UpgradeSchemaRequest {
        const message = { namespaceConfigs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpgradeSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpgradeSchemaRequest): UpgradeSchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string namespace_configs */ 1:
                    message.namespaceConfigs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpgradeSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string namespace_configs = 1; */
        for (let i = 0; i < message.namespaceConfigs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.namespaceConfigs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.UpgradeSchemaRequest
 */
export const UpgradeSchemaRequest = new UpgradeSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeSchemaResponse$Type extends MessageType<UpgradeSchemaResponse> {
    constructor() {
        super("authzed.api.v0.UpgradeSchemaResponse", [
            { no: 1, name: "error", kind: "message", T: () => DeveloperError },
            { no: 2, name: "upgraded_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpgradeSchemaResponse>): UpgradeSchemaResponse {
        const message = { upgradedSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpgradeSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpgradeSchemaResponse): UpgradeSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.DeveloperError error */ 1:
                    message.error = DeveloperError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* string upgraded_schema */ 2:
                    message.upgradedSchema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpgradeSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.DeveloperError error = 1; */
        if (message.error)
            DeveloperError.internalBinaryWrite(message.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string upgraded_schema = 2; */
        if (message.upgradedSchema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.upgradedSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.UpgradeSchemaResponse
 */
export const UpgradeSchemaResponse = new UpgradeSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareRequest$Type extends MessageType<ShareRequest> {
    constructor() {
        super("authzed.api.v0.ShareRequest", [
            { no: 1, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "relationships_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "validation_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "assertions_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShareRequest>): ShareRequest {
        const message = { schema: "", relationshipsYaml: "", validationYaml: "", assertionsYaml: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShareRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareRequest): ShareRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema */ 1:
                    message.schema = reader.string();
                    break;
                case /* string relationships_yaml */ 2:
                    message.relationshipsYaml = reader.string();
                    break;
                case /* string validation_yaml */ 3:
                    message.validationYaml = reader.string();
                    break;
                case /* string assertions_yaml */ 4:
                    message.assertionsYaml = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShareRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema = 1; */
        if (message.schema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schema);
        /* string relationships_yaml = 2; */
        if (message.relationshipsYaml !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.relationshipsYaml);
        /* string validation_yaml = 3; */
        if (message.validationYaml !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validationYaml);
        /* string assertions_yaml = 4; */
        if (message.assertionsYaml !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.assertionsYaml);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ShareRequest
 */
export const ShareRequest = new ShareRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareResponse$Type extends MessageType<ShareResponse> {
    constructor() {
        super("authzed.api.v0.ShareResponse", [
            { no: 1, name: "share_reference", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShareResponse>): ShareResponse {
        const message = { shareReference: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShareResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareResponse): ShareResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string share_reference */ 1:
                    message.shareReference = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShareResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string share_reference = 1; */
        if (message.shareReference !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.shareReference);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ShareResponse
 */
export const ShareResponse = new ShareResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LookupShareRequest$Type extends MessageType<LookupShareRequest> {
    constructor() {
        super("authzed.api.v0.LookupShareRequest", [
            { no: 1, name: "share_reference", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LookupShareRequest>): LookupShareRequest {
        const message = { shareReference: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LookupShareRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LookupShareRequest): LookupShareRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string share_reference */ 1:
                    message.shareReference = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LookupShareRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string share_reference = 1; */
        if (message.shareReference !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.shareReference);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.LookupShareRequest
 */
export const LookupShareRequest = new LookupShareRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LookupShareResponse$Type extends MessageType<LookupShareResponse> {
    constructor() {
        super("authzed.api.v0.LookupShareResponse", [
            { no: 1, name: "status", kind: "enum", T: () => ["authzed.api.v0.LookupShareResponse.LookupStatus", LookupShareResponse_LookupStatus] },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "relationships_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "validation_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "assertions_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LookupShareResponse>): LookupShareResponse {
        const message = { status: 0, schema: "", relationshipsYaml: "", validationYaml: "", assertionsYaml: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LookupShareResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LookupShareResponse): LookupShareResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.LookupShareResponse.LookupStatus status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* string relationships_yaml */ 3:
                    message.relationshipsYaml = reader.string();
                    break;
                case /* string validation_yaml */ 4:
                    message.validationYaml = reader.string();
                    break;
                case /* string assertions_yaml */ 5:
                    message.assertionsYaml = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LookupShareResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.LookupShareResponse.LookupStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* string relationships_yaml = 3; */
        if (message.relationshipsYaml !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.relationshipsYaml);
        /* string validation_yaml = 4; */
        if (message.validationYaml !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.validationYaml);
        /* string assertions_yaml = 5; */
        if (message.assertionsYaml !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.assertionsYaml);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.LookupShareResponse
 */
export const LookupShareResponse = new LookupShareResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestContext$Type extends MessageType<RequestContext> {
    constructor() {
        super("authzed.api.v0.RequestContext", [
            { no: 1, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "relationships", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelationTuple }
        ]);
    }
    create(value?: PartialMessage<RequestContext>): RequestContext {
        const message = { schema: "", relationships: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestContext): RequestContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema */ 1:
                    message.schema = reader.string();
                    break;
                case /* repeated authzed.api.v0.RelationTuple relationships */ 2:
                    message.relationships.push(RelationTuple.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema = 1; */
        if (message.schema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schema);
        /* repeated authzed.api.v0.RelationTuple relationships = 2; */
        for (let i = 0; i < message.relationships.length; i++)
            RelationTuple.internalBinaryWrite(message.relationships[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.RequestContext
 */
export const RequestContext = new RequestContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditCheckRequest$Type extends MessageType<EditCheckRequest> {
    constructor() {
        super("authzed.api.v0.EditCheckRequest", [
            { no: 1, name: "context", kind: "message", T: () => RequestContext },
            { no: 2, name: "check_relationships", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelationTuple }
        ]);
    }
    create(value?: PartialMessage<EditCheckRequest>): EditCheckRequest {
        const message = { checkRelationships: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditCheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditCheckRequest): EditCheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.RequestContext context */ 1:
                    message.context = RequestContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* repeated authzed.api.v0.RelationTuple check_relationships */ 2:
                    message.checkRelationships.push(RelationTuple.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditCheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.RequestContext context = 1; */
        if (message.context)
            RequestContext.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated authzed.api.v0.RelationTuple check_relationships = 2; */
        for (let i = 0; i < message.checkRelationships.length; i++)
            RelationTuple.internalBinaryWrite(message.checkRelationships[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.EditCheckRequest
 */
export const EditCheckRequest = new EditCheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditCheckResult$Type extends MessageType<EditCheckResult> {
    constructor() {
        super("authzed.api.v0.EditCheckResult", [
            { no: 1, name: "relationship", kind: "message", T: () => RelationTuple },
            { no: 2, name: "is_member", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "error", kind: "message", T: () => DeveloperError }
        ]);
    }
    create(value?: PartialMessage<EditCheckResult>): EditCheckResult {
        const message = { isMember: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditCheckResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditCheckResult): EditCheckResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.RelationTuple relationship */ 1:
                    message.relationship = RelationTuple.internalBinaryRead(reader, reader.uint32(), options, message.relationship);
                    break;
                case /* bool is_member */ 2:
                    message.isMember = reader.bool();
                    break;
                case /* authzed.api.v0.DeveloperError error */ 3:
                    message.error = DeveloperError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditCheckResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.RelationTuple relationship = 1; */
        if (message.relationship)
            RelationTuple.internalBinaryWrite(message.relationship, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_member = 2; */
        if (message.isMember !== false)
            writer.tag(2, WireType.Varint).bool(message.isMember);
        /* authzed.api.v0.DeveloperError error = 3; */
        if (message.error)
            DeveloperError.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.EditCheckResult
 */
export const EditCheckResult = new EditCheckResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditCheckResponse$Type extends MessageType<EditCheckResponse> {
    constructor() {
        super("authzed.api.v0.EditCheckResponse", [
            { no: 1, name: "request_errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeveloperError },
            { no: 2, name: "check_results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EditCheckResult }
        ]);
    }
    create(value?: PartialMessage<EditCheckResponse>): EditCheckResponse {
        const message = { requestErrors: [], checkResults: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditCheckResponse): EditCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v0.DeveloperError request_errors */ 1:
                    message.requestErrors.push(DeveloperError.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated authzed.api.v0.EditCheckResult check_results */ 2:
                    message.checkResults.push(EditCheckResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v0.DeveloperError request_errors = 1; */
        for (let i = 0; i < message.requestErrors.length; i++)
            DeveloperError.internalBinaryWrite(message.requestErrors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated authzed.api.v0.EditCheckResult check_results = 2; */
        for (let i = 0; i < message.checkResults.length; i++)
            EditCheckResult.internalBinaryWrite(message.checkResults[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.EditCheckResponse
 */
export const EditCheckResponse = new EditCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateRequest$Type extends MessageType<ValidateRequest> {
    constructor() {
        super("authzed.api.v0.ValidateRequest", [
            { no: 1, name: "context", kind: "message", T: () => RequestContext },
            { no: 3, name: "validation_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "update_validation_yaml", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "assertions_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateRequest>): ValidateRequest {
        const message = { validationYaml: "", updateValidationYaml: false, assertionsYaml: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateRequest): ValidateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v0.RequestContext context */ 1:
                    message.context = RequestContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* string validation_yaml */ 3:
                    message.validationYaml = reader.string();
                    break;
                case /* bool update_validation_yaml */ 4:
                    message.updateValidationYaml = reader.bool();
                    break;
                case /* string assertions_yaml */ 5:
                    message.assertionsYaml = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v0.RequestContext context = 1; */
        if (message.context)
            RequestContext.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string validation_yaml = 3; */
        if (message.validationYaml !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validationYaml);
        /* bool update_validation_yaml = 4; */
        if (message.updateValidationYaml !== false)
            writer.tag(4, WireType.Varint).bool(message.updateValidationYaml);
        /* string assertions_yaml = 5; */
        if (message.assertionsYaml !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.assertionsYaml);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ValidateRequest
 */
export const ValidateRequest = new ValidateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateResponse$Type extends MessageType<ValidateResponse> {
    constructor() {
        super("authzed.api.v0.ValidateResponse", [
            { no: 1, name: "request_errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeveloperError },
            { no: 2, name: "validation_errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeveloperError },
            { no: 3, name: "updated_validation_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateResponse>): ValidateResponse {
        const message = { requestErrors: [], validationErrors: [], updatedValidationYaml: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateResponse): ValidateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v0.DeveloperError request_errors */ 1:
                    message.requestErrors.push(DeveloperError.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated authzed.api.v0.DeveloperError validation_errors */ 2:
                    message.validationErrors.push(DeveloperError.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string updated_validation_yaml */ 3:
                    message.updatedValidationYaml = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v0.DeveloperError request_errors = 1; */
        for (let i = 0; i < message.requestErrors.length; i++)
            DeveloperError.internalBinaryWrite(message.requestErrors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated authzed.api.v0.DeveloperError validation_errors = 2; */
        for (let i = 0; i < message.validationErrors.length; i++)
            DeveloperError.internalBinaryWrite(message.validationErrors[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string updated_validation_yaml = 3; */
        if (message.updatedValidationYaml !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.updatedValidationYaml);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.ValidateResponse
 */
export const ValidateResponse = new ValidateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeveloperError$Type extends MessageType<DeveloperError> {
    constructor() {
        super("authzed.api.v0.DeveloperError", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "line", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "column", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "source", kind: "enum", T: () => ["authzed.api.v0.DeveloperError.Source", DeveloperError_Source] },
            { no: 5, name: "kind", kind: "enum", T: () => ["authzed.api.v0.DeveloperError.ErrorKind", DeveloperError_ErrorKind] },
            { no: 6, name: "path", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "context", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeveloperError>): DeveloperError {
        const message = { message: "", line: 0, column: 0, source: 0, kind: 0, path: [], context: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeveloperError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeveloperError): DeveloperError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* uint32 line */ 2:
                    message.line = reader.uint32();
                    break;
                case /* uint32 column */ 3:
                    message.column = reader.uint32();
                    break;
                case /* authzed.api.v0.DeveloperError.Source source */ 4:
                    message.source = reader.int32();
                    break;
                case /* authzed.api.v0.DeveloperError.ErrorKind kind */ 5:
                    message.kind = reader.int32();
                    break;
                case /* repeated string path */ 6:
                    message.path.push(reader.string());
                    break;
                case /* string context */ 7:
                    message.context = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeveloperError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* uint32 line = 2; */
        if (message.line !== 0)
            writer.tag(2, WireType.Varint).uint32(message.line);
        /* uint32 column = 3; */
        if (message.column !== 0)
            writer.tag(3, WireType.Varint).uint32(message.column);
        /* authzed.api.v0.DeveloperError.Source source = 4; */
        if (message.source !== 0)
            writer.tag(4, WireType.Varint).int32(message.source);
        /* authzed.api.v0.DeveloperError.ErrorKind kind = 5; */
        if (message.kind !== 0)
            writer.tag(5, WireType.Varint).int32(message.kind);
        /* repeated string path = 6; */
        for (let i = 0; i < message.path.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.path[i]);
        /* string context = 7; */
        if (message.context !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.context);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v0.DeveloperError
 */
export const DeveloperError = new DeveloperError$Type();
/**
 * @generated ServiceType for protobuf service authzed.api.v0.DeveloperService
 */
export const DeveloperService = new ServiceType("authzed.api.v0.DeveloperService", [
    { name: "EditCheck", options: {}, I: EditCheckRequest, O: EditCheckResponse },
    { name: "Validate", options: {}, I: ValidateRequest, O: ValidateResponse },
    { name: "Share", options: {}, I: ShareRequest, O: ShareResponse },
    { name: "LookupShared", options: {}, I: LookupShareRequest, O: LookupShareResponse },
    { name: "UpgradeSchema", options: {}, I: UpgradeSchemaRequest, O: UpgradeSchemaResponse },
    { name: "FormatSchema", options: {}, I: FormatSchemaRequest, O: FormatSchemaResponse }
]);
