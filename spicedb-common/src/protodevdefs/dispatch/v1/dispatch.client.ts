// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "dispatch/v1/dispatch.proto" (package "dispatch.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DispatchService } from "./dispatch";
import type { DispatchLookupSubjectsResponse } from "./dispatch";
import type { DispatchLookupSubjectsRequest } from "./dispatch";
import type { DispatchLookupResourcesResponse } from "./dispatch";
import type { DispatchLookupResourcesRequest } from "./dispatch";
import type { DispatchReachableResourcesResponse } from "./dispatch";
import type { DispatchReachableResourcesRequest } from "./dispatch";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { DispatchExpandResponse } from "./dispatch";
import type { DispatchExpandRequest } from "./dispatch";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DispatchCheckResponse } from "./dispatch";
import type { DispatchCheckRequest } from "./dispatch";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dispatch.v1.DispatchService
 */
export interface IDispatchServiceClient {
    /**
     * @generated from protobuf rpc: DispatchCheck(dispatch.v1.DispatchCheckRequest) returns (dispatch.v1.DispatchCheckResponse);
     */
    dispatchCheck(input: DispatchCheckRequest, options?: RpcOptions): UnaryCall<DispatchCheckRequest, DispatchCheckResponse>;
    /**
     * @generated from protobuf rpc: DispatchExpand(dispatch.v1.DispatchExpandRequest) returns (dispatch.v1.DispatchExpandResponse);
     */
    dispatchExpand(input: DispatchExpandRequest, options?: RpcOptions): UnaryCall<DispatchExpandRequest, DispatchExpandResponse>;
    /**
     * @generated from protobuf rpc: DispatchReachableResources(dispatch.v1.DispatchReachableResourcesRequest) returns (stream dispatch.v1.DispatchReachableResourcesResponse);
     */
    dispatchReachableResources(input: DispatchReachableResourcesRequest, options?: RpcOptions): ServerStreamingCall<DispatchReachableResourcesRequest, DispatchReachableResourcesResponse>;
    /**
     * @generated from protobuf rpc: DispatchLookupResources(dispatch.v1.DispatchLookupResourcesRequest) returns (stream dispatch.v1.DispatchLookupResourcesResponse);
     */
    dispatchLookupResources(input: DispatchLookupResourcesRequest, options?: RpcOptions): ServerStreamingCall<DispatchLookupResourcesRequest, DispatchLookupResourcesResponse>;
    /**
     * @generated from protobuf rpc: DispatchLookupSubjects(dispatch.v1.DispatchLookupSubjectsRequest) returns (stream dispatch.v1.DispatchLookupSubjectsResponse);
     */
    dispatchLookupSubjects(input: DispatchLookupSubjectsRequest, options?: RpcOptions): ServerStreamingCall<DispatchLookupSubjectsRequest, DispatchLookupSubjectsResponse>;
}
/**
 * @generated from protobuf service dispatch.v1.DispatchService
 */
export class DispatchServiceClient implements IDispatchServiceClient, ServiceInfo {
    typeName = DispatchService.typeName;
    methods = DispatchService.methods;
    options = DispatchService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DispatchCheck(dispatch.v1.DispatchCheckRequest) returns (dispatch.v1.DispatchCheckResponse);
     */
    dispatchCheck(input: DispatchCheckRequest, options?: RpcOptions): UnaryCall<DispatchCheckRequest, DispatchCheckResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DispatchCheckRequest, DispatchCheckResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DispatchExpand(dispatch.v1.DispatchExpandRequest) returns (dispatch.v1.DispatchExpandResponse);
     */
    dispatchExpand(input: DispatchExpandRequest, options?: RpcOptions): UnaryCall<DispatchExpandRequest, DispatchExpandResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DispatchExpandRequest, DispatchExpandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DispatchReachableResources(dispatch.v1.DispatchReachableResourcesRequest) returns (stream dispatch.v1.DispatchReachableResourcesResponse);
     */
    dispatchReachableResources(input: DispatchReachableResourcesRequest, options?: RpcOptions): ServerStreamingCall<DispatchReachableResourcesRequest, DispatchReachableResourcesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DispatchReachableResourcesRequest, DispatchReachableResourcesResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DispatchLookupResources(dispatch.v1.DispatchLookupResourcesRequest) returns (stream dispatch.v1.DispatchLookupResourcesResponse);
     */
    dispatchLookupResources(input: DispatchLookupResourcesRequest, options?: RpcOptions): ServerStreamingCall<DispatchLookupResourcesRequest, DispatchLookupResourcesResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DispatchLookupResourcesRequest, DispatchLookupResourcesResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DispatchLookupSubjects(dispatch.v1.DispatchLookupSubjectsRequest) returns (stream dispatch.v1.DispatchLookupSubjectsResponse);
     */
    dispatchLookupSubjects(input: DispatchLookupSubjectsRequest, options?: RpcOptions): ServerStreamingCall<DispatchLookupSubjectsRequest, DispatchLookupSubjectsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DispatchLookupSubjectsRequest, DispatchLookupSubjectsResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
